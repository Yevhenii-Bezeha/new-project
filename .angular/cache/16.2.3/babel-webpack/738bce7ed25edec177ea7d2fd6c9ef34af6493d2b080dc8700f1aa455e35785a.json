{"ast":null,"code":"import _asyncToGenerator from \"/Users/ybezeha/WebstormProjects/new-project/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// pkg/dist-src/index.js\nimport { getUserAgent } from \"universal-user-agent\";\nimport { request } from \"@octokit/request\";\n\n// pkg/dist-src/auth.js\nimport btoa from \"btoa-lite\";\nimport { createOAuthUserAuth } from \"@octokit/auth-oauth-user\";\nfunction auth(_x, _x2) {\n  return _auth.apply(this, arguments);\n} // pkg/dist-src/hook.js\nfunction _auth() {\n  _auth = _asyncToGenerator(function* (state, authOptions) {\n    if (authOptions.type === \"oauth-app\") {\n      return {\n        type: \"oauth-app\",\n        clientId: state.clientId,\n        clientSecret: state.clientSecret,\n        clientType: state.clientType,\n        headers: {\n          authorization: `basic ${btoa(`${state.clientId}:${state.clientSecret}`)}`\n        }\n      };\n    }\n    if (\"factory\" in authOptions) {\n      const {\n        type,\n        ...options\n      } = {\n        ...authOptions,\n        ...state\n      };\n      return authOptions.factory(options);\n    }\n    const common = {\n      clientId: state.clientId,\n      clientSecret: state.clientSecret,\n      request: state.request,\n      ...authOptions\n    };\n    const userAuth = state.clientType === \"oauth-app\" ? yield createOAuthUserAuth({\n      ...common,\n      clientType: state.clientType\n    }) : yield createOAuthUserAuth({\n      ...common,\n      clientType: state.clientType\n    });\n    return userAuth();\n  });\n  return _auth.apply(this, arguments);\n}\nimport btoa2 from \"btoa-lite\";\nimport { requiresBasicAuth } from \"@octokit/auth-oauth-user\";\nfunction hook(_x3, _x4, _x5, _x6) {\n  return _hook.apply(this, arguments);\n} // pkg/dist-src/version.js\nfunction _hook() {\n  _hook = _asyncToGenerator(function* (state, request2, route, parameters) {\n    let endpoint = request2.endpoint.merge(route, parameters);\n    if (/\\/login\\/(oauth\\/access_token|device\\/code)$/.test(endpoint.url)) {\n      return request2(endpoint);\n    }\n    if (state.clientType === \"github-app\" && !requiresBasicAuth(endpoint.url)) {\n      throw new Error(`[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than \"/applications/{client_id}/**\". \"${endpoint.method} ${endpoint.url}\" is not supported.`);\n    }\n    const credentials = btoa2(`${state.clientId}:${state.clientSecret}`);\n    endpoint.headers.authorization = `basic ${credentials}`;\n    try {\n      return yield request2(endpoint);\n    } catch (error) {\n      if (error.status !== 401) throw error;\n      error.message = `[@octokit/auth-oauth-app] \"${endpoint.method} ${endpoint.url}\" does not support clientId/clientSecret basic authentication.`;\n      throw error;\n    }\n  });\n  return _hook.apply(this, arguments);\n}\nvar VERSION = \"7.0.1\";\n\n// pkg/dist-src/index.js\nimport { createOAuthUserAuth as createOAuthUserAuth2 } from \"@octokit/auth-oauth-user\";\nfunction createOAuthAppAuth(options) {\n  const state = Object.assign({\n    request: request.defaults({\n      headers: {\n        \"user-agent\": `octokit-auth-oauth-app.js/${VERSION} ${getUserAgent()}`\n      }\n    }),\n    clientType: \"oauth-app\"\n  }, options);\n  return Object.assign(auth.bind(null, state), {\n    hook: hook.bind(null, state)\n  });\n}\nexport { createOAuthAppAuth, createOAuthUserAuth2 as createOAuthUserAuth };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}