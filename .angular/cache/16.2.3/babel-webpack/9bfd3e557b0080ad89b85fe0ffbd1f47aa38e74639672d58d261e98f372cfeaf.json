{"ast":null,"code":"import _asyncToGenerator from \"/Users/ybezeha/WebstormProjects/new-project/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// pkg/dist-src/index.js\nimport { Octokit } from \"@octokit/core\";\n\n// pkg/dist-src/error-request.js\nfunction errorRequest(_x, _x2, _x3, _x4) {\n  return _errorRequest.apply(this, arguments);\n} // pkg/dist-src/wrap-request.js\nfunction _errorRequest() {\n  _errorRequest = _asyncToGenerator(function* (state, octokit, error, options) {\n    if (!error.request || !error.request.request) {\n      throw error;\n    }\n    if (error.status >= 400 && !state.doNotRetry.includes(error.status)) {\n      const retries = options.request.retries != null ? options.request.retries : state.retries;\n      const retryAfter = Math.pow((options.request.retryCount || 0) + 1, 2);\n      throw octokit.retry.retryRequest(error, retries, retryAfter);\n    }\n    throw error;\n  });\n  return _errorRequest.apply(this, arguments);\n}\nimport Bottleneck from \"bottleneck/light\";\nimport { RequestError } from \"@octokit/request-error\";\nfunction wrapRequest(_x5, _x6, _x7, _x8) {\n  return _wrapRequest.apply(this, arguments);\n}\nfunction _wrapRequest() {\n  _wrapRequest = _asyncToGenerator(function* (state, octokit, request, options) {\n    const limiter = new Bottleneck();\n    limiter.on(\"failed\", function (error, info) {\n      const maxRetries = ~~error.request.request.retries;\n      const after = ~~error.request.request.retryAfter;\n      options.request.retryCount = info.retryCount + 1;\n      if (maxRetries > info.retryCount) {\n        return after * state.retryAfterBaseValue;\n      }\n    });\n    return limiter.schedule(requestWithGraphqlErrorHandling.bind(null, state, octokit, request), options);\n  });\n  return _wrapRequest.apply(this, arguments);\n}\nfunction requestWithGraphqlErrorHandling(_x9, _x10, _x11, _x12) {\n  return _requestWithGraphqlErrorHandling.apply(this, arguments);\n} // pkg/dist-src/index.js\nfunction _requestWithGraphqlErrorHandling() {\n  _requestWithGraphqlErrorHandling = _asyncToGenerator(function* (state, octokit, request, options) {\n    const response = yield request(request, options);\n    if (response.data && response.data.errors && /Something went wrong while executing your query/.test(response.data.errors[0].message)) {\n      const error = new RequestError(response.data.errors[0].message, 500, {\n        request: options,\n        response\n      });\n      return errorRequest(state, octokit, error, options);\n    }\n    return response;\n  });\n  return _requestWithGraphqlErrorHandling.apply(this, arguments);\n}\nvar VERSION = \"6.0.0\";\nfunction retry(octokit, octokitOptions) {\n  const state = Object.assign({\n    enabled: true,\n    retryAfterBaseValue: 1e3,\n    doNotRetry: [400, 401, 403, 404, 422, 451],\n    retries: 3\n  }, octokitOptions.retry);\n  if (state.enabled) {\n    octokit.hook.error(\"request\", errorRequest.bind(null, state, octokit));\n    octokit.hook.wrap(\"request\", wrapRequest.bind(null, state, octokit));\n  }\n  return {\n    retry: {\n      retryRequest: (error, retries, retryAfter) => {\n        error.request.request = Object.assign({}, error.request.request, {\n          retries,\n          retryAfter\n        });\n        return error;\n      }\n    }\n  };\n}\nretry.VERSION = VERSION;\nexport { VERSION, retry };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}