{"ast":null,"code":"import _asyncToGenerator from \"/Users/ybezeha/WebstormProjects/new-project/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/ybezeha/WebstormProjects/new-project/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/ybezeha/WebstormProjects/new-project/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/ybezeha/WebstormProjects/new-project/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nvar _class;\n// pkg/dist-src/index.js\nimport { Octokit as OctokitCore } from \"@octokit/core\";\nimport { createAppAuth as createAppAuth3 } from \"@octokit/auth-app\";\nimport { OAuthApp } from \"@octokit/oauth-app\";\nimport { Webhooks as Webhooks2 } from \"@octokit/webhooks\";\n\n// pkg/dist-src/version.js\nvar VERSION = \"14.0.0\";\n\n// pkg/dist-src/webhooks.js\nimport { Octokit } from \"@octokit/core\";\nimport { createAppAuth } from \"@octokit/auth-app\";\nimport { createUnauthenticatedAuth } from \"@octokit/auth-unauthenticated\";\nimport { Webhooks } from \"@octokit/webhooks\";\nfunction webhooks(appOctokit, options) {\n  return new Webhooks({\n    secret: options.secret,\n    transform: function () {\n      var _ref = _asyncToGenerator(function* (event) {\n        if (!(\"installation\" in event.payload) || typeof event.payload.installation !== \"object\") {\n          const octokit2 = new appOctokit.constructor({\n            authStrategy: createUnauthenticatedAuth,\n            auth: {\n              reason: `\"installation\" key missing in webhook event payload`\n            }\n          });\n          return {\n            ...event,\n            octokit: octokit2\n          };\n        }\n        const installationId = event.payload.installation.id;\n        const octokit = yield appOctokit.auth({\n          type: \"installation\",\n          installationId,\n          factory(auth) {\n            return new auth.octokit.constructor({\n              ...auth.octokitOptions,\n              authStrategy: createAppAuth,\n              ...{\n                auth: {\n                  ...auth,\n                  installationId\n                }\n              }\n            });\n          }\n        });\n        octokit.hook.before(\"request\", options2 => {\n          options2.headers[\"x-github-delivery\"] = event.id;\n        });\n        return {\n          ...event,\n          octokit\n        };\n      });\n      return function transform(_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  });\n}\n\n// pkg/dist-src/each-installation.js\nimport { composePaginateRest } from \"@octokit/plugin-paginate-rest\";\nimport { Octokit as Octokit3 } from \"@octokit/core\";\n\n// pkg/dist-src/get-installation-octokit.js\nimport { createAppAuth as createAppAuth2 } from \"@octokit/auth-app\";\nimport { Octokit as Octokit2 } from \"@octokit/core\";\nfunction getInstallationOctokit(_x2, _x3) {\n  return _getInstallationOctokit.apply(this, arguments);\n} // pkg/dist-src/each-installation.js\nfunction _getInstallationOctokit() {\n  _getInstallationOctokit = _asyncToGenerator(function* (app, installationId) {\n    return app.octokit.auth({\n      type: \"installation\",\n      installationId,\n      factory(auth) {\n        const options = {\n          ...auth.octokitOptions,\n          authStrategy: createAppAuth2,\n          ...{\n            auth: {\n              ...auth,\n              installationId\n            }\n          }\n        };\n        return new auth.octokit.constructor(options);\n      }\n    });\n  });\n  return _getInstallationOctokit.apply(this, arguments);\n}\nfunction eachInstallationFactory(app) {\n  return Object.assign(eachInstallation.bind(null, app), {\n    iterator: eachInstallationIterator.bind(null, app)\n  });\n}\nfunction eachInstallation(_x4, _x5) {\n  return _eachInstallation.apply(this, arguments);\n}\nfunction _eachInstallation() {\n  _eachInstallation = _asyncToGenerator(function* (app, callback) {\n    const i = eachInstallationIterator(app)[Symbol.asyncIterator]();\n    let result = yield i.next();\n    while (!result.done) {\n      yield callback(result.value);\n      result = yield i.next();\n    }\n  });\n  return _eachInstallation.apply(this, arguments);\n}\nfunction eachInstallationIterator(app) {\n  return {\n    [Symbol.asyncIterator]() {\n      return _wrapAsyncGenerator(function* () {\n        const iterator = composePaginateRest.iterator(app.octokit, \"GET /app/installations\");\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(iterator), _step; _iteratorAbruptCompletion = !(_step = yield _awaitAsyncGenerator(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n            const {\n              data: installations\n            } = _step.value;\n            {\n              for (const installation of installations) {\n                const installationOctokit = yield _awaitAsyncGenerator(getInstallationOctokit(app, installation.id));\n                yield {\n                  octokit: installationOctokit,\n                  installation\n                };\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              yield _awaitAsyncGenerator(_iterator.return());\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      })();\n    }\n  };\n}\n\n// pkg/dist-src/each-repository.js\nimport { composePaginateRest as composePaginateRest2 } from \"@octokit/plugin-paginate-rest\";\nimport { Octokit as Octokit4 } from \"@octokit/core\";\nfunction eachRepositoryFactory(app) {\n  return Object.assign(eachRepository.bind(null, app), {\n    iterator: eachRepositoryIterator.bind(null, app)\n  });\n}\nfunction eachRepository(_x6, _x7, _x8) {\n  return _eachRepository.apply(this, arguments);\n}\nfunction _eachRepository() {\n  _eachRepository = _asyncToGenerator(function* (app, queryOrCallback, callback) {\n    const i = eachRepositoryIterator(app, callback ? queryOrCallback : void 0)[Symbol.asyncIterator]();\n    let result = yield i.next();\n    while (!result.done) {\n      if (callback) {\n        yield callback(result.value);\n      } else {\n        yield queryOrCallback(result.value);\n      }\n      result = yield i.next();\n    }\n  });\n  return _eachRepository.apply(this, arguments);\n}\nfunction singleInstallationIterator(app, installationId) {\n  return {\n    [Symbol.asyncIterator]() {\n      return _wrapAsyncGenerator(function* () {\n        yield {\n          octokit: yield _awaitAsyncGenerator(app.getInstallationOctokit(installationId))\n        };\n      })();\n    }\n  };\n}\nfunction eachRepositoryIterator(app, query) {\n  return {\n    [Symbol.asyncIterator]() {\n      return _wrapAsyncGenerator(function* () {\n        const iterator = query ? singleInstallationIterator(app, query.installationId) : app.eachInstallation.iterator();\n        var _iteratorAbruptCompletion2 = false;\n        var _didIteratorError2 = false;\n        var _iteratorError2;\n        try {\n          for (var _iterator2 = _asyncIterator(iterator), _step2; _iteratorAbruptCompletion2 = !(_step2 = yield _awaitAsyncGenerator(_iterator2.next())).done; _iteratorAbruptCompletion2 = false) {\n            const {\n              octokit\n            } = _step2.value;\n            {\n              const repositoriesIterator = composePaginateRest2.iterator(octokit, \"GET /installation/repositories\");\n              var _iteratorAbruptCompletion3 = false;\n              var _didIteratorError3 = false;\n              var _iteratorError3;\n              try {\n                for (var _iterator3 = _asyncIterator(repositoriesIterator), _step3; _iteratorAbruptCompletion3 = !(_step3 = yield _awaitAsyncGenerator(_iterator3.next())).done; _iteratorAbruptCompletion3 = false) {\n                  const {\n                    data: repositories\n                  } = _step3.value;\n                  {\n                    for (const repository of repositories) {\n                      yield {\n                        octokit,\n                        repository\n                      };\n                    }\n                  }\n                }\n              } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n              } finally {\n                try {\n                  if (_iteratorAbruptCompletion3 && _iterator3.return != null) {\n                    yield _awaitAsyncGenerator(_iterator3.return());\n                  }\n                } finally {\n                  if (_didIteratorError3) {\n                    throw _iteratorError3;\n                  }\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n              yield _awaitAsyncGenerator(_iterator2.return());\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      })();\n    }\n  };\n}\n\n// pkg/dist-src/middleware/node/index.js\nimport { createNodeMiddleware as oauthNodeMiddleware, sendNodeResponse, unknownRouteResponse } from \"@octokit/oauth-app\";\nimport { createNodeMiddleware as webhooksNodeMiddleware } from \"@octokit/webhooks\";\nfunction noop() {}\nfunction createNodeMiddleware(app, options = {}) {\n  const log = Object.assign({\n    debug: noop,\n    info: noop,\n    warn: console.warn.bind(console),\n    error: console.error.bind(console)\n  }, options.log);\n  const optionsWithDefaults = {\n    pathPrefix: \"/api/github\",\n    ...options,\n    log\n  };\n  const webhooksMiddleware = webhooksNodeMiddleware(app.webhooks, {\n    path: optionsWithDefaults.pathPrefix + \"/webhooks\",\n    log\n  });\n  const oauthMiddleware = oauthNodeMiddleware(app.oauth, {\n    pathPrefix: optionsWithDefaults.pathPrefix + \"/oauth\"\n  });\n  return middleware.bind(null, optionsWithDefaults.pathPrefix, webhooksMiddleware, oauthMiddleware);\n}\nfunction middleware(_x9, _x10, _x11, _x12, _x13, _x14) {\n  return _middleware.apply(this, arguments);\n} // pkg/dist-src/index.js\nfunction _middleware() {\n  _middleware = _asyncToGenerator(function* (pathPrefix, webhooksMiddleware, oauthMiddleware, request, response, next) {\n    const {\n      pathname\n    } = new URL(request.url, \"http://localhost\");\n    if (pathname.startsWith(`${pathPrefix}/`)) {\n      if (pathname === `${pathPrefix}/webhooks`) {\n        webhooksMiddleware(request, response);\n      } else if (pathname.startsWith(`${pathPrefix}/oauth/`)) {\n        oauthMiddleware(request, response);\n      } else {\n        sendNodeResponse(unknownRouteResponse(request), response);\n      }\n      return true;\n    } else {\n      next?.();\n      return false;\n    }\n  });\n  return _middleware.apply(this, arguments);\n}\nvar App = (_class = class App {\n  static defaults(defaults) {\n    const AppWithDefaults = class extends this {\n      constructor(...args) {\n        super({\n          ...defaults,\n          ...args[0]\n        });\n      }\n    };\n    return AppWithDefaults;\n  }\n  constructor(options) {\n    const Octokit5 = options.Octokit || OctokitCore;\n    const authOptions = Object.assign({\n      appId: options.appId,\n      privateKey: options.privateKey\n    }, options.oauth ? {\n      clientId: options.oauth.clientId,\n      clientSecret: options.oauth.clientSecret\n    } : {});\n    this.octokit = new Octokit5({\n      authStrategy: createAppAuth3,\n      auth: authOptions,\n      log: options.log\n    });\n    this.log = Object.assign({\n      debug: () => {},\n      info: () => {},\n      warn: console.warn.bind(console),\n      error: console.error.bind(console)\n    }, options.log);\n    if (options.webhooks) {\n      this.webhooks = webhooks(this.octokit, options.webhooks);\n    } else {\n      Object.defineProperty(this, \"webhooks\", {\n        get() {\n          throw new Error(\"[@octokit/app] webhooks option not set\");\n        }\n      });\n    }\n    if (options.oauth) {\n      this.oauth = new OAuthApp({\n        ...options.oauth,\n        clientType: \"github-app\",\n        Octokit: Octokit5\n      });\n    } else {\n      Object.defineProperty(this, \"oauth\", {\n        get() {\n          throw new Error(\"[@octokit/app] oauth.clientId / oauth.clientSecret options are not set\");\n        }\n      });\n    }\n    this.getInstallationOctokit = getInstallationOctokit.bind(null, this);\n    this.eachInstallation = eachInstallationFactory(this);\n    this.eachRepository = eachRepositoryFactory(this);\n  }\n}, _class.VERSION = VERSION, _class);\nexport { App, createNodeMiddleware };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}