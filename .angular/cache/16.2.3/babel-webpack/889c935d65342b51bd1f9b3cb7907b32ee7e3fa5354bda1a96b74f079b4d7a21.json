{"ast":null,"code":"// pkg/dist-src/octokit.js\nimport { Octokit as OctokitCore } from \"@octokit/core\";\nimport { paginateRest } from \"@octokit/plugin-paginate-rest\";\nimport { paginateGraphql } from \"@octokit/plugin-paginate-graphql\";\nimport { restEndpointMethods } from \"@octokit/plugin-rest-endpoint-methods\";\nimport { retry } from \"@octokit/plugin-retry\";\nimport { throttling } from \"@octokit/plugin-throttling\";\n\n// pkg/dist-src/version.js\nvar VERSION = \"3.1.0\";\n\n// pkg/dist-src/octokit.js\nimport { RequestError } from \"@octokit/request-error\";\nvar Octokit = OctokitCore.plugin(restEndpointMethods, paginateRest, paginateGraphql, retry, throttling).defaults({\n  userAgent: `octokit.js/${VERSION}`,\n  throttle: {\n    onRateLimit,\n    onSecondaryRateLimit\n  }\n});\nfunction onRateLimit(retryAfter, options, octokit) {\n  octokit.log.warn(`Request quota exhausted for request ${options.method} ${options.url}`);\n  if (options.request.retryCount === 0) {\n    octokit.log.info(`Retrying after ${retryAfter} seconds!`);\n    return true;\n  }\n}\nfunction onSecondaryRateLimit(retryAfter, options, octokit) {\n  octokit.log.warn(`SecondaryRateLimit detected for request ${options.method} ${options.url}`);\n  if (options.request.retryCount === 0) {\n    octokit.log.info(`Retrying after ${retryAfter} seconds!`);\n    return true;\n  }\n}\n\n// pkg/dist-src/app.js\nimport { App as DefaultApp } from \"@octokit/app\";\nimport { OAuthApp as DefaultOAuthApp } from \"@octokit/oauth-app\";\nimport { createNodeMiddleware } from \"@octokit/app\";\nvar App = DefaultApp.defaults({\n  Octokit\n});\nvar OAuthApp = DefaultOAuthApp.defaults({\n  Octokit\n});\nexport { App, OAuthApp, Octokit, RequestError, createNodeMiddleware };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}