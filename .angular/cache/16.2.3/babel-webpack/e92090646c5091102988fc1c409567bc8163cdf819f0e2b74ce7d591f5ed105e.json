{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/ybezeha/WebstormProjects/new-project/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _class;\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// pkg/dist-src/index.js\nvar dist_src_exports = {};\n__export(dist_src_exports, {\n  OAuthApp: () => OAuthApp,\n  createAWSLambdaAPIGatewayV2Handler: () => createAWSLambdaAPIGatewayV2Handler,\n  createNodeMiddleware: () => createNodeMiddleware,\n  createWebWorkerHandler: () => createWebWorkerHandler,\n  handleRequest: () => handleRequest,\n  sendNodeResponse: () => sendResponse,\n  unknownRouteResponse: () => unknownRouteResponse\n});\nmodule.exports = __toCommonJS(dist_src_exports);\nvar import_auth_oauth_app = require(\"@octokit/auth-oauth-app\");\n\n// pkg/dist-src/version.js\nvar VERSION = \"6.0.0\";\n\n// pkg/dist-src/add-event-handler.js\nfunction addEventHandler(state, eventName, eventHandler) {\n  if (Array.isArray(eventName)) {\n    for (const singleEventName of eventName) {\n      addEventHandler(state, singleEventName, eventHandler);\n    }\n    return;\n  }\n  if (!state.eventHandlers[eventName]) {\n    state.eventHandlers[eventName] = [];\n  }\n  state.eventHandlers[eventName].push(eventHandler);\n}\n\n// pkg/dist-src/oauth-app-octokit.js\nvar import_core = require(\"@octokit/core\");\nvar import_universal_user_agent = require(\"universal-user-agent\");\nvar OAuthAppOctokit = import_core.Octokit.defaults({\n  userAgent: `octokit-oauth-app.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`\n});\n\n// pkg/dist-src/methods/get-user-octokit.js\nvar import_auth_oauth_user = require(\"@octokit/auth-oauth-user\");\n\n// pkg/dist-src/emit-event.js\nfunction emitEvent(_x, _x2) {\n  return _emitEvent.apply(this, arguments);\n} // pkg/dist-src/methods/get-user-octokit.js\nfunction _emitEvent() {\n  _emitEvent = _asyncToGenerator(function* (state, context) {\n    const {\n      name,\n      action\n    } = context;\n    if (state.eventHandlers[`${name}.${action}`]) {\n      for (const eventHandler of state.eventHandlers[`${name}.${action}`]) {\n        yield eventHandler(context);\n      }\n    }\n    if (state.eventHandlers[name]) {\n      for (const eventHandler of state.eventHandlers[name]) {\n        yield eventHandler(context);\n      }\n    }\n  });\n  return _emitEvent.apply(this, arguments);\n}\nfunction getUserOctokitWithState(_x3, _x4) {\n  return _getUserOctokitWithState.apply(this, arguments);\n} // pkg/dist-src/methods/get-web-flow-authorization-url.js\nfunction _getUserOctokitWithState() {\n  _getUserOctokitWithState = _asyncToGenerator(function* (state, options) {\n    return state.octokit.auth({\n      type: \"oauth-user\",\n      ...options,\n      factory(options2) {\n        return _asyncToGenerator(function* () {\n          const octokit = new state.Octokit({\n            authStrategy: import_auth_oauth_user.createOAuthUserAuth,\n            auth: options2\n          });\n          const authentication = yield octokit.auth({\n            type: \"get\"\n          });\n          yield emitEvent(state, {\n            name: \"token\",\n            action: \"created\",\n            token: authentication.token,\n            scopes: authentication.scopes,\n            authentication,\n            octokit\n          });\n          return octokit;\n        })();\n      }\n    });\n  });\n  return _getUserOctokitWithState.apply(this, arguments);\n}\nvar OAuthMethods = __toESM(require(\"@octokit/oauth-methods\"));\nfunction getWebFlowAuthorizationUrlWithState(state, options) {\n  const optionsWithDefaults = {\n    clientId: state.clientId,\n    request: state.octokit.request,\n    ...options,\n    allowSignup: state.allowSignup ?? options.allowSignup,\n    redirectUrl: options.redirectUrl ?? state.redirectUrl,\n    scopes: options.scopes ?? state.defaultScopes\n  };\n  return OAuthMethods.getWebFlowAuthorizationUrl({\n    clientType: state.clientType,\n    ...optionsWithDefaults\n  });\n}\n\n// pkg/dist-src/methods/create-token.js\nvar OAuthAppAuth = __toESM(require(\"@octokit/auth-oauth-app\"));\nfunction createTokenWithState(_x5, _x6) {\n  return _createTokenWithState.apply(this, arguments);\n} // pkg/dist-src/methods/check-token.js\nfunction _createTokenWithState() {\n  _createTokenWithState = _asyncToGenerator(function* (state, options) {\n    const authentication = yield state.octokit.auth({\n      type: \"oauth-user\",\n      ...options\n    });\n    yield emitEvent(state, {\n      name: \"token\",\n      action: \"created\",\n      token: authentication.token,\n      scopes: authentication.scopes,\n      authentication,\n      octokit: new state.Octokit({\n        authStrategy: OAuthAppAuth.createOAuthUserAuth,\n        auth: {\n          clientType: state.clientType,\n          clientId: state.clientId,\n          clientSecret: state.clientSecret,\n          token: authentication.token,\n          scopes: authentication.scopes,\n          refreshToken: authentication.refreshToken,\n          expiresAt: authentication.expiresAt,\n          refreshTokenExpiresAt: authentication.refreshTokenExpiresAt\n        }\n      })\n    });\n    return {\n      authentication\n    };\n  });\n  return _createTokenWithState.apply(this, arguments);\n}\nvar OAuthMethods2 = __toESM(require(\"@octokit/oauth-methods\"));\nfunction checkTokenWithState(_x7, _x8) {\n  return _checkTokenWithState.apply(this, arguments);\n} // pkg/dist-src/methods/reset-token.js\nfunction _checkTokenWithState() {\n  _checkTokenWithState = _asyncToGenerator(function* (state, options) {\n    const result = yield OAuthMethods2.checkToken({\n      // @ts-expect-error not worth the extra code to appease TS\n      clientType: state.clientType,\n      clientId: state.clientId,\n      clientSecret: state.clientSecret,\n      request: state.octokit.request,\n      ...options\n    });\n    Object.assign(result.authentication, {\n      type: \"token\",\n      tokenType: \"oauth\"\n    });\n    return result;\n  });\n  return _checkTokenWithState.apply(this, arguments);\n}\nvar OAuthMethods3 = __toESM(require(\"@octokit/oauth-methods\"));\nvar import_auth_oauth_user2 = require(\"@octokit/auth-oauth-user\");\nfunction resetTokenWithState(_x9, _x10) {\n  return _resetTokenWithState.apply(this, arguments);\n} // pkg/dist-src/methods/refresh-token.js\nfunction _resetTokenWithState() {\n  _resetTokenWithState = _asyncToGenerator(function* (state, options) {\n    const optionsWithDefaults = {\n      clientId: state.clientId,\n      clientSecret: state.clientSecret,\n      request: state.octokit.request,\n      ...options\n    };\n    if (state.clientType === \"oauth-app\") {\n      const response2 = yield OAuthMethods3.resetToken({\n        clientType: \"oauth-app\",\n        ...optionsWithDefaults\n      });\n      const authentication2 = Object.assign(response2.authentication, {\n        type: \"token\",\n        tokenType: \"oauth\"\n      });\n      yield emitEvent(state, {\n        name: \"token\",\n        action: \"reset\",\n        token: response2.authentication.token,\n        scopes: response2.authentication.scopes || void 0,\n        authentication: authentication2,\n        octokit: new state.Octokit({\n          authStrategy: import_auth_oauth_user2.createOAuthUserAuth,\n          auth: {\n            clientType: state.clientType,\n            clientId: state.clientId,\n            clientSecret: state.clientSecret,\n            token: response2.authentication.token,\n            scopes: response2.authentication.scopes\n          }\n        })\n      });\n      return {\n        ...response2,\n        authentication: authentication2\n      };\n    }\n    const response = yield OAuthMethods3.resetToken({\n      clientType: \"github-app\",\n      ...optionsWithDefaults\n    });\n    const authentication = Object.assign(response.authentication, {\n      type: \"token\",\n      tokenType: \"oauth\"\n    });\n    yield emitEvent(state, {\n      name: \"token\",\n      action: \"reset\",\n      token: response.authentication.token,\n      authentication,\n      octokit: new state.Octokit({\n        authStrategy: import_auth_oauth_user2.createOAuthUserAuth,\n        auth: {\n          clientType: state.clientType,\n          clientId: state.clientId,\n          clientSecret: state.clientSecret,\n          token: response.authentication.token\n        }\n      })\n    });\n    return {\n      ...response,\n      authentication\n    };\n  });\n  return _resetTokenWithState.apply(this, arguments);\n}\nvar OAuthMethods4 = __toESM(require(\"@octokit/oauth-methods\"));\nvar import_auth_oauth_user3 = require(\"@octokit/auth-oauth-user\");\nfunction refreshTokenWithState(_x11, _x12) {\n  return _refreshTokenWithState.apply(this, arguments);\n} // pkg/dist-src/methods/scope-token.js\nfunction _refreshTokenWithState() {\n  _refreshTokenWithState = _asyncToGenerator(function* (state, options) {\n    if (state.clientType === \"oauth-app\") {\n      throw new Error(\"[@octokit/oauth-app] app.refreshToken() is not supported for OAuth Apps\");\n    }\n    const response = yield OAuthMethods4.refreshToken({\n      clientType: \"github-app\",\n      clientId: state.clientId,\n      clientSecret: state.clientSecret,\n      request: state.octokit.request,\n      refreshToken: options.refreshToken\n    });\n    const authentication = Object.assign(response.authentication, {\n      type: \"token\",\n      tokenType: \"oauth\"\n    });\n    yield emitEvent(state, {\n      name: \"token\",\n      action: \"refreshed\",\n      token: response.authentication.token,\n      authentication,\n      octokit: new state.Octokit({\n        authStrategy: import_auth_oauth_user3.createOAuthUserAuth,\n        auth: {\n          clientType: state.clientType,\n          clientId: state.clientId,\n          clientSecret: state.clientSecret,\n          token: response.authentication.token\n        }\n      })\n    });\n    return {\n      ...response,\n      authentication\n    };\n  });\n  return _refreshTokenWithState.apply(this, arguments);\n}\nvar OAuthMethods5 = __toESM(require(\"@octokit/oauth-methods\"));\nvar import_auth_oauth_user4 = require(\"@octokit/auth-oauth-user\");\nfunction scopeTokenWithState(_x13, _x14) {\n  return _scopeTokenWithState.apply(this, arguments);\n} // pkg/dist-src/methods/delete-token.js\nfunction _scopeTokenWithState() {\n  _scopeTokenWithState = _asyncToGenerator(function* (state, options) {\n    if (state.clientType === \"oauth-app\") {\n      throw new Error(\"[@octokit/oauth-app] app.scopeToken() is not supported for OAuth Apps\");\n    }\n    const response = yield OAuthMethods5.scopeToken({\n      clientType: \"github-app\",\n      clientId: state.clientId,\n      clientSecret: state.clientSecret,\n      request: state.octokit.request,\n      ...options\n    });\n    const authentication = Object.assign(response.authentication, {\n      type: \"token\",\n      tokenType: \"oauth\"\n    });\n    yield emitEvent(state, {\n      name: \"token\",\n      action: \"scoped\",\n      token: response.authentication.token,\n      authentication,\n      octokit: new state.Octokit({\n        authStrategy: import_auth_oauth_user4.createOAuthUserAuth,\n        auth: {\n          clientType: state.clientType,\n          clientId: state.clientId,\n          clientSecret: state.clientSecret,\n          token: response.authentication.token\n        }\n      })\n    });\n    return {\n      ...response,\n      authentication\n    };\n  });\n  return _scopeTokenWithState.apply(this, arguments);\n}\nvar OAuthMethods6 = __toESM(require(\"@octokit/oauth-methods\"));\nvar import_auth_unauthenticated = require(\"@octokit/auth-unauthenticated\");\nfunction deleteTokenWithState(_x15, _x16) {\n  return _deleteTokenWithState.apply(this, arguments);\n} // pkg/dist-src/methods/delete-authorization.js\nfunction _deleteTokenWithState() {\n  _deleteTokenWithState = _asyncToGenerator(function* (state, options) {\n    const optionsWithDefaults = {\n      clientId: state.clientId,\n      clientSecret: state.clientSecret,\n      request: state.octokit.request,\n      ...options\n    };\n    const response = state.clientType === \"oauth-app\" ? yield OAuthMethods6.deleteToken({\n      clientType: \"oauth-app\",\n      ...optionsWithDefaults\n    }) : // istanbul ignore next\n    yield OAuthMethods6.deleteToken({\n      clientType: \"github-app\",\n      ...optionsWithDefaults\n    });\n    yield emitEvent(state, {\n      name: \"token\",\n      action: \"deleted\",\n      token: options.token,\n      octokit: new state.Octokit({\n        authStrategy: import_auth_unauthenticated.createUnauthenticatedAuth,\n        auth: {\n          reason: `Handling \"token.deleted\" event. The access for the token has been revoked.`\n        }\n      })\n    });\n    return response;\n  });\n  return _deleteTokenWithState.apply(this, arguments);\n}\nvar OAuthMethods7 = __toESM(require(\"@octokit/oauth-methods\"));\nvar import_auth_unauthenticated2 = require(\"@octokit/auth-unauthenticated\");\nfunction deleteAuthorizationWithState(_x17, _x18) {\n  return _deleteAuthorizationWithState.apply(this, arguments);\n} // pkg/dist-src/middleware/unknown-route-response.js\nfunction _deleteAuthorizationWithState() {\n  _deleteAuthorizationWithState = _asyncToGenerator(function* (state, options) {\n    const optionsWithDefaults = {\n      clientId: state.clientId,\n      clientSecret: state.clientSecret,\n      request: state.octokit.request,\n      ...options\n    };\n    const response = state.clientType === \"oauth-app\" ? yield OAuthMethods7.deleteAuthorization({\n      clientType: \"oauth-app\",\n      ...optionsWithDefaults\n    }) : // istanbul ignore next\n    yield OAuthMethods7.deleteAuthorization({\n      clientType: \"github-app\",\n      ...optionsWithDefaults\n    });\n    yield emitEvent(state, {\n      name: \"token\",\n      action: \"deleted\",\n      token: options.token,\n      octokit: new state.Octokit({\n        authStrategy: import_auth_unauthenticated2.createUnauthenticatedAuth,\n        auth: {\n          reason: `Handling \"token.deleted\" event. The access for the token has been revoked.`\n        }\n      })\n    });\n    yield emitEvent(state, {\n      name: \"authorization\",\n      action: \"deleted\",\n      token: options.token,\n      octokit: new state.Octokit({\n        authStrategy: import_auth_unauthenticated2.createUnauthenticatedAuth,\n        auth: {\n          reason: `Handling \"authorization.deleted\" event. The access for the app has been revoked.`\n        }\n      })\n    });\n    return response;\n  });\n  return _deleteAuthorizationWithState.apply(this, arguments);\n}\nfunction unknownRouteResponse(request) {\n  return {\n    status: 404,\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    text: JSON.stringify({\n      error: `Unknown route: ${request.method} ${request.url}`\n    })\n  };\n}\n\n// pkg/dist-src/middleware/handle-request.js\nfunction handleRequest(_x19, _x20, _x21) {\n  return _handleRequest.apply(this, arguments);\n} // pkg/dist-src/middleware/node/parse-request.js\nfunction _handleRequest() {\n  _handleRequest = _asyncToGenerator(function* (app, {\n    pathPrefix = \"/api/github/oauth\"\n  }, request) {\n    if (request.method === \"OPTIONS\") {\n      return {\n        status: 200,\n        headers: {\n          \"access-control-allow-origin\": \"*\",\n          \"access-control-allow-methods\": \"*\",\n          \"access-control-allow-headers\": \"Content-Type, User-Agent, Authorization\"\n        }\n      };\n    }\n    let {\n      pathname\n    } = new URL(request.url, \"http://localhost\");\n    if (!pathname.startsWith(`${pathPrefix}/`)) {\n      return void 0;\n    }\n    pathname = pathname.slice(pathPrefix.length + 1);\n    const route = [request.method, pathname].join(\" \");\n    const routes = {\n      getLogin: `GET login`,\n      getCallback: `GET callback`,\n      createToken: `POST token`,\n      getToken: `GET token`,\n      patchToken: `PATCH token`,\n      patchRefreshToken: `PATCH refresh-token`,\n      scopeToken: `POST token/scoped`,\n      deleteToken: `DELETE token`,\n      deleteGrant: `DELETE grant`\n    };\n    if (!Object.values(routes).includes(route)) {\n      return unknownRouteResponse(request);\n    }\n    let json;\n    try {\n      const text = yield request.text();\n      json = text ? JSON.parse(text) : {};\n    } catch (error) {\n      return {\n        status: 400,\n        headers: {\n          \"content-type\": \"application/json\",\n          \"access-control-allow-origin\": \"*\"\n        },\n        text: JSON.stringify({\n          error: \"[@octokit/oauth-app] request error\"\n        })\n      };\n    }\n    const {\n      searchParams\n    } = new URL(request.url, \"http://localhost\");\n    const query = Object.fromEntries(searchParams);\n    const headers = request.headers;\n    try {\n      if (route === routes.getLogin) {\n        const {\n          url\n        } = app.getWebFlowAuthorizationUrl({\n          state: query.state,\n          scopes: query.scopes ? query.scopes.split(\",\") : void 0,\n          allowSignup: query.allowSignup ? query.allowSignup === \"true\" : void 0,\n          redirectUrl: query.redirectUrl\n        });\n        return {\n          status: 302,\n          headers: {\n            location: url\n          }\n        };\n      }\n      if (route === routes.getCallback) {\n        if (query.error) {\n          throw new Error(`[@octokit/oauth-app] ${query.error} ${query.error_description}`);\n        }\n        if (!query.code) {\n          throw new Error('[@octokit/oauth-app] \"code\" parameter is required');\n        }\n        const {\n          authentication: {\n            token: token2\n          }\n        } = yield app.createToken({\n          code: query.code\n        });\n        return {\n          status: 200,\n          headers: {\n            \"content-type\": \"text/html\"\n          },\n          text: `<h1>Token created successfully</h1>\n\n<p>Your token is: <strong>${token2}</strong>. Copy it now as it cannot be shown again.</p>`\n        };\n      }\n      if (route === routes.createToken) {\n        const {\n          code,\n          redirectUrl\n        } = json;\n        if (!code) {\n          throw new Error('[@octokit/oauth-app] \"code\" parameter is required');\n        }\n        const result = yield app.createToken({\n          code,\n          redirectUrl\n        });\n        delete result.authentication.clientSecret;\n        return {\n          status: 201,\n          headers: {\n            \"content-type\": \"application/json\",\n            \"access-control-allow-origin\": \"*\"\n          },\n          text: JSON.stringify(result)\n        };\n      }\n      if (route === routes.getToken) {\n        const token2 = headers.authorization?.substr(\"token \".length);\n        if (!token2) {\n          throw new Error('[@octokit/oauth-app] \"Authorization\" header is required');\n        }\n        const result = yield app.checkToken({\n          token: token2\n        });\n        delete result.authentication.clientSecret;\n        return {\n          status: 200,\n          headers: {\n            \"content-type\": \"application/json\",\n            \"access-control-allow-origin\": \"*\"\n          },\n          text: JSON.stringify(result)\n        };\n      }\n      if (route === routes.patchToken) {\n        const token2 = headers.authorization?.substr(\"token \".length);\n        if (!token2) {\n          throw new Error('[@octokit/oauth-app] \"Authorization\" header is required');\n        }\n        const result = yield app.resetToken({\n          token: token2\n        });\n        delete result.authentication.clientSecret;\n        return {\n          status: 200,\n          headers: {\n            \"content-type\": \"application/json\",\n            \"access-control-allow-origin\": \"*\"\n          },\n          text: JSON.stringify(result)\n        };\n      }\n      if (route === routes.patchRefreshToken) {\n        const token2 = headers.authorization?.substr(\"token \".length);\n        if (!token2) {\n          throw new Error('[@octokit/oauth-app] \"Authorization\" header is required');\n        }\n        const {\n          refreshToken: refreshToken2\n        } = json;\n        if (!refreshToken2) {\n          throw new Error(\"[@octokit/oauth-app] refreshToken must be sent in request body\");\n        }\n        const result = yield app.refreshToken({\n          refreshToken: refreshToken2\n        });\n        delete result.authentication.clientSecret;\n        return {\n          status: 200,\n          headers: {\n            \"content-type\": \"application/json\",\n            \"access-control-allow-origin\": \"*\"\n          },\n          text: JSON.stringify(result)\n        };\n      }\n      if (route === routes.scopeToken) {\n        const token2 = headers.authorization?.substr(\"token \".length);\n        if (!token2) {\n          throw new Error('[@octokit/oauth-app] \"Authorization\" header is required');\n        }\n        const result = yield app.scopeToken({\n          token: token2,\n          ...json\n        });\n        delete result.authentication.clientSecret;\n        return {\n          status: 200,\n          headers: {\n            \"content-type\": \"application/json\",\n            \"access-control-allow-origin\": \"*\"\n          },\n          text: JSON.stringify(result)\n        };\n      }\n      if (route === routes.deleteToken) {\n        const token2 = headers.authorization?.substr(\"token \".length);\n        if (!token2) {\n          throw new Error('[@octokit/oauth-app] \"Authorization\" header is required');\n        }\n        yield app.deleteToken({\n          token: token2\n        });\n        return {\n          status: 204,\n          headers: {\n            \"access-control-allow-origin\": \"*\"\n          }\n        };\n      }\n      const token = headers.authorization?.substr(\"token \".length);\n      if (!token) {\n        throw new Error('[@octokit/oauth-app] \"Authorization\" header is required');\n      }\n      yield app.deleteAuthorization({\n        token\n      });\n      return {\n        status: 204,\n        headers: {\n          \"access-control-allow-origin\": \"*\"\n        }\n      };\n    } catch (error) {\n      return {\n        status: 400,\n        headers: {\n          \"content-type\": \"application/json\",\n          \"access-control-allow-origin\": \"*\"\n        },\n        text: JSON.stringify({\n          error: error.message\n        })\n      };\n    }\n  });\n  return _handleRequest.apply(this, arguments);\n}\nfunction parseRequest(request) {\n  const {\n    method,\n    url,\n    headers\n  } = request;\n  function text() {\n    return _text.apply(this, arguments);\n  }\n  function _text() {\n    _text = _asyncToGenerator(function* () {\n      const text2 = yield new Promise((resolve, reject) => {\n        let bodyChunks = [];\n        request.on(\"error\", reject).on(\"data\", chunk => bodyChunks.push(chunk)).on(\"end\", () => resolve(Buffer.concat(bodyChunks).toString()));\n      });\n      return text2;\n    });\n    return _text.apply(this, arguments);\n  }\n  return {\n    method,\n    url,\n    headers,\n    text\n  };\n}\n\n// pkg/dist-src/middleware/node/send-response.js\nfunction sendResponse(octokitResponse, response) {\n  response.writeHead(octokitResponse.status, octokitResponse.headers);\n  response.end(octokitResponse.text);\n}\n\n// pkg/dist-src/middleware/node/index.js\nfunction createNodeMiddleware(app, options = {}) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (request, response, next) {\n      const octokitRequest = yield parseRequest(request);\n      const octokitResponse = yield handleRequest(app, options, octokitRequest);\n      if (octokitResponse) {\n        sendResponse(octokitResponse, response);\n        return true;\n      } else {\n        next?.();\n        return false;\n      }\n    });\n    return function (_x22, _x23, _x24) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\n\n// pkg/dist-src/middleware/web-worker/parse-request.js\nfunction parseRequest2(request) {\n  const headers = Object.fromEntries(request.headers.entries());\n  return {\n    method: request.method,\n    url: request.url,\n    headers,\n    text: () => request.text()\n  };\n}\n\n// pkg/dist-src/middleware/web-worker/send-response.js\nfunction sendResponse2(octokitResponse) {\n  return new Response(octokitResponse.text, {\n    status: octokitResponse.status,\n    headers: octokitResponse.headers\n  });\n}\n\n// pkg/dist-src/middleware/web-worker/index.js\nfunction createWebWorkerHandler(app, options = {}) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(function* (request) {\n      const octokitRequest = yield parseRequest2(request);\n      const octokitResponse = yield handleRequest(app, options, octokitRequest);\n      return octokitResponse ? sendResponse2(octokitResponse) : void 0;\n    });\n    return function (_x25) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}\n\n// pkg/dist-src/middleware/aws-lambda/api-gateway-v2-parse-request.js\nfunction parseRequest3(request) {\n  const {\n    method\n  } = request.requestContext.http;\n  let url = request.rawPath;\n  const {\n    stage\n  } = request.requestContext;\n  if (url.startsWith(\"/\" + stage)) url = url.substring(stage.length + 1);\n  if (request.rawQueryString) url += \"?\" + request.rawQueryString;\n  const headers = request.headers;\n  const text = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      return request.body || \"\";\n    });\n    return function text() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return {\n    method,\n    url,\n    headers,\n    text\n  };\n}\n\n// pkg/dist-src/middleware/aws-lambda/api-gateway-v2-send-response.js\nfunction sendResponse3(octokitResponse) {\n  return {\n    statusCode: octokitResponse.status,\n    headers: octokitResponse.headers,\n    body: octokitResponse.text\n  };\n}\n\n// pkg/dist-src/middleware/aws-lambda/api-gateway-v2.js\nfunction createAWSLambdaAPIGatewayV2Handler(app, options = {}) {\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator(function* (event) {\n      const request = parseRequest3(event);\n      const response = yield handleRequest(app, options, request);\n      return response ? sendResponse3(response) : void 0;\n    });\n    return function (_x26) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n}\n\n// pkg/dist-src/index.js\nvar OAuthApp = (_class = class OAuthApp {\n  static defaults(defaults) {\n    const OAuthAppWithDefaults = class extends this {\n      constructor(...args) {\n        super({\n          ...defaults,\n          ...args[0]\n        });\n      }\n    };\n    return OAuthAppWithDefaults;\n  }\n  constructor(options) {\n    const Octokit2 = options.Octokit || OAuthAppOctokit;\n    this.type = options.clientType || \"oauth-app\";\n    const octokit = new Octokit2({\n      authStrategy: import_auth_oauth_app.createOAuthAppAuth,\n      auth: {\n        clientType: this.type,\n        clientId: options.clientId,\n        clientSecret: options.clientSecret\n      }\n    });\n    const state = {\n      clientType: this.type,\n      clientId: options.clientId,\n      clientSecret: options.clientSecret,\n      // @ts-expect-error defaultScopes not permitted for GitHub Apps\n      defaultScopes: options.defaultScopes || [],\n      allowSignup: options.allowSignup,\n      baseUrl: options.baseUrl,\n      redirectUrl: options.redirectUrl,\n      log: options.log,\n      Octokit: Octokit2,\n      octokit,\n      eventHandlers: {}\n    };\n    this.on = addEventHandler.bind(null, state);\n    this.octokit = octokit;\n    this.getUserOctokit = getUserOctokitWithState.bind(null, state);\n    this.getWebFlowAuthorizationUrl = getWebFlowAuthorizationUrlWithState.bind(null, state);\n    this.createToken = createTokenWithState.bind(null, state);\n    this.checkToken = checkTokenWithState.bind(null, state);\n    this.resetToken = resetTokenWithState.bind(null, state);\n    this.refreshToken = refreshTokenWithState.bind(null, state);\n    this.scopeToken = scopeTokenWithState.bind(null, state);\n    this.deleteToken = deleteTokenWithState.bind(null, state);\n    this.deleteAuthorization = deleteAuthorizationWithState.bind(null, state);\n  }\n}, _class.VERSION = VERSION, _class);\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  OAuthApp,\n  createAWSLambdaAPIGatewayV2Handler,\n  createNodeMiddleware,\n  createWebWorkerHandler,\n  handleRequest,\n  sendNodeResponse,\n  unknownRouteResponse\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}